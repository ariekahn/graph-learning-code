# -*- coding: utf-8 -*-
# emacs: -*- mode: python; py-indent-offset: 4; indent-tabs-mode: nil -*-
# vi: set ft=python sts=4 ts=4 sw=4 et:
from builtins import range

from nipype.interfaces import fsl as fsl  # fsl
from nipype import (
        Node,
        MapNode,
        Workflow,
        IdentityInterface,
        Function,
        Merge,
        )

from distutils.version import LooseVersion

from graphlearning_mvpa.util import CustomCluster


def create_modelfit_workflow(name='modelfit', f_contrasts=False, keep_res4d=False):
    """Create an FSL individual modelfitting workflow

    Example
    -------

    >>> modelfit = create_modelfit_workflow()
    >>> modelfit.base_dir = '.'
    >>> info = dict()
    >>> modelfit.inputs.inputspec.session_info = info
    >>> modelfit.inputs.inputspec.interscan_interval = 3.
    >>> modelfit.inputs.inputspec.film_threshold = 1000
    >>> modelfit.run() #doctest: +SKIP

    Inputs::

         inputspec.session_info : info generated by modelgen.SpecifyModel
         inputspec.interscan_interval : interscan interval
         inputspec.contrasts : list of contrasts
         inputspec.film_threshold : image threshold for FILM estimation
         inputspec.model_serial_correlations
         inputspec.bases

    Outputs::

         outputspec.copes
         outputspec.varcopes
         outputspec.dof_file
         outputspec.pfiles
         outputspec.zfiles
         outputspec.parameter_estimates
    """

    version = 0
    if fsl.Info.version() and \
            LooseVersion(fsl.Info.version()) > LooseVersion('5.0.6'):
        version = 507
    assert version >= 507, 'FSL version too low'

    modelfit = Workflow(name=name)
    """
    Create the nodes
    """

    inputspec = Node(
        IdentityInterface(fields=[
            'session_info', 'interscan_interval', 'contrasts',
            'film_threshold', 'functional_data', 'bases',
            'model_serial_correlations'
        ]),
        name='inputspec')
    level1design = Node(interface=fsl.Level1Design(), name="level1design")
    modelgen = MapNode(
        interface=fsl.FEATModel(),
        name='modelgen',
        iterfield=['fsf_file', 'ev_files'])

    if f_contrasts:
        iterfield = ['design_file', 'in_file', 'tcon_file', 'fcon_file']
    else:
        iterfield = ['design_file', 'in_file', 'tcon_file']
    modelestimate = MapNode(
        interface=fsl.FILMGLS(smooth_autocorr=True, mask_size=5),
        name='modelestimate',
        iterfield=iterfield)

    if f_contrasts:
        iterfield = ['in1', 'in2']
    else:
        iterfield = ['in1']
    merge_contrasts = MapNode(
        interface=Merge(2), name='merge_contrasts', iterfield=iterfield)
    ztopval = MapNode(
        interface=fsl.ImageMaths(op_string='-ztop', suffix='_pval'),
        nested=True,
        name='ztop',
        iterfield=['in_file'])

    outputspec = Node(
        IdentityInterface(fields=[
            'copes', 'varcopes', 'dof_file', 'pfiles', 'zfiles', 'res4d',
            'parameter_estimates', 'index_files', 'threshold_files',
        ]),
        name='outputspec')
    """
    Setup the connections
    """

    modelfit.connect([
        (inputspec, level1design,
         [('interscan_interval', 'interscan_interval'),
          ('session_info', 'session_info'), ('contrasts', 'contrasts'),
          ('bases', 'bases'), ('model_serial_correlations',
                               'model_serial_correlations')]),
        (inputspec, modelestimate, [('film_threshold', 'threshold'),
                                    ('functional_data', 'in_file')]),
        (level1design, modelgen, [('fsf_files', 'fsf_file'), ('ev_files',
                                                              'ev_files')]),
        (modelgen, modelestimate, [('design_file', 'design_file')]),
        (merge_contrasts, ztopval, [('out', 'in_file')]),
        (ztopval, outputspec, [('out_file', 'pfiles')]),
        (merge_contrasts, outputspec, [('out', 'zfiles')]),
        (modelestimate, outputspec, [('param_estimates',
                                      'parameter_estimates'), ('dof_file',
                                                               'dof_file')]),
    ])
    modelfit.connect([
        (modelgen, modelestimate, [('con_file', 'tcon_file'),
                                   ('fcon_file', 'fcon_file')]),
        (modelestimate, merge_contrasts, [('zstats', 'in1'), ('zfstats',
                                                               'in2')]),
        (modelestimate, outputspec, [('copes', 'copes'),
                                     ('varcopes', 'varcopes'),
                                     # ('zstats', 'zfstats')]
                                     ]),
    ])
    if keep_res4d:
        modelfit.connect([
            (modelestimate, outputspec, [('residual4d', 'res4d')]),
        ])
    return modelfit


def read_dof_fn(dof_file):
    with open(dof_file) as f:
        text = f.read()
    return int(text.split(' ')[0])


def expand_fields(dlh, volume, in_file):
    return ([dlh]*len(in_file), [volume]*len(in_file), in_file)


def create_postprocessing_workflow(name='postprocessing'):

    postprocessing = Workflow(name='postprocessing')

    inputspec = Node(
        IdentityInterface(fields=[
            'zfiles', 'res4d', 'mask', 'dof_file'
        ]),
        name='inputspec',
        )
    """
    Clustering
    """
    readdof = MapNode(
            interface=Function(input_names=['dof_file'],
                               output_names=['dof'],
                               function=read_dof_fn),
            iterfield=['dof_file'],
            name='readdof')
    expandfields = MapNode(
            interface=Function(input_names=['dlh', 'volume', 'in_file'],
                                    output_names=['dlh', 'volume', 'in_file'],
                                    function=expand_fields),
            name='expandfields',
            iterfield=['dlh', 'volume', 'in_file'])
    smoothestimate = MapNode(
            interface=fsl.SmoothEstimate(),
            iterfield=['dof', 'residual_fit_file'],
            name='smoothestimate',
            )
    maskzstat = MapNode(
            interface=fsl.ImageMaths(op_string='-mas'),
            name='maskzstat',
            iterfield=['in_file'],
            nested=True,
            )
    cluster = MapNode(
            interface=CustomCluster(
                threshold=3.1,
                pthreshold=0.05,
                out_threshold_file=True,
                out_index_file=True,
                terminal_output='stream'),
            name='cluster',
            iterfield=['in_file', 'dlh', 'volume'],
            nested=True,
            )
    outputspec = Node(
        IdentityInterface(fields=[
            'index_file', 'threshold_file', 'cluster_output',
        ]),
        name='outputspec')
    postprocessing.connect([
        (inputspec, readdof, [('dof_file', 'dof_file')]),
        (readdof, smoothestimate, [('dof', 'dof')]),
        (inputspec, smoothestimate, [('res4d', 'residual_fit_file'),
                                     ('mask', 'mask_file')]),
        (smoothestimate, expandfields, [('dlh', 'dlh'),
                                   ('volume', 'volume')]),
        (inputspec, maskzstat, [('zfiles', 'in_file'),
                                ('mask', 'in_file2')]),
        (maskzstat, expandfields, [('out_file', 'in_file')]),
        (expandfields, cluster, [('in_file', 'in_file'),
                                ('dlh', 'dlh'),
                                ('volume', 'volume')]),
        (cluster, outputspec, [('index_file', 'index_file'),
                               ('output_file', 'cluster_output'),
                               ('threshold_file', 'threshold_file')]),
        ])
    return postprocessing
